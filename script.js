/* ===== OverNight Demo ‚Äì script.js (hardened) =====
   ‚Ä¢ Kh√¥ng ghi c·ª©ng API-KEY trong m√£ ngu·ªìn public
   ‚Ä¢ To√†n b·ªô log nh·∫°y c·∫£m ƒë√£ lo·∫°i b·ªè
   ‚Ä¢ Th√™m throttling ƒë∆°n gi·∫£n tr√°nh spam
*/

/* ---------- C·∫•u h√¨nh ---------- */
const API_URL = "https://overnight-api-beta.vercel.app/solve";

/*  
   üëâ C√°ch n·∫°p KEY an to√†n:
   1) T·∫°o file .env local (kh√¥ng commit):
        VITE_OVN_KEY=your_secret_key
   2) D√πng bundler (Vite, webpack) ƒë·ªÉ inject:
        const API_KEY = import.meta.env.VITE_OVN_KEY;
   3) Ho·∫∑c t·∫°m th·ªùi g√°n th·ªß c√¥ng d∆∞·ªõi ƒë√¢y r·ªìi xo√° tr∆∞·ªõc khi public.
*/
const API_KEY = "REPLACE_WITH_KEY";

/* ---------- Throttling: 1 request / 2 s ---------- */
let lastCall = 0;
function canCall() {
  const now = Date.now();
  if (now - lastCall < 2000) return false;
  lastCall = now;
  return true;
}

/* ---------- H√†m x·ª≠ l√Ω ch√≠nh ---------- */
async function solve() {
  const xInput   = document.getElementById("x");
  const resultEl = document.getElementById("result");
  const x        = Number(xInput.value);

  /* Ki·ªÉm tra ƒë·∫ßu v√†o */
  if (!x || x <= 2 || x % 2 !== 0) {
    resultEl.innerText = "Vui l√≤ng nh·∫≠p s·ªë ch·∫µn l·ªõn h∆°n 2";
    return;
  }
  const MAX = 2 ** 53;
  if (x > MAX) {
    resultEl.innerText =
      "Gi·ªõi h·∫°n th·ª≠ nghi·ªám l√† 2^53 (do m√°y t√≠nh), kh√¥ng ph·∫£i gi·ªõi h·∫°n c·ªßa thu·∫≠t to√°n OverNight.";
    return;
  }

  /* Throttling */
  if (!canCall()) {
    resultEl.innerText = "ƒêang ch·ªù‚Ä¶ vui l√≤ng th·ª≠ l·∫°i sau 2 gi√¢y.";
    return;
  }

  /* G·ªçi API */
  try {
    resultEl.innerText = "ƒêang x·ª≠ l√Ω‚Ä¶";

    const url = `${API_URL}?x=${x}&key=${API_KEY}`;
    const res = await fetch(url, { method: "GET" });

    if (!res.ok) {
      resultEl.innerText = "Kh√¥ng truy c·∫≠p ƒë∆∞·ª£c API.";
      return;
    }
    const data = await res.json();

    if (data?.a && data?.b && data.x === x) {
      resultEl.innerText = `${x} = ${data.a} + ${data.b}`;
    } else {
      resultEl.innerText = "Kh√¥ng t√¨m th·∫•y nghi·ªám ph√π h·ª£p.";
    }
  } catch {
    resultEl.innerText = "ƒê√£ x·∫£y ra l·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω.";
  }
}
